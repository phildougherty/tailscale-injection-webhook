apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tailscale-injector.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tailscale-injector.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "tailscale-injector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.webhook.metricsPort }}"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "tailscale-injector.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tailscale-injector.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ include "tailscale-injector.name" . }}
              topologyKey: kubernetes.io/hostname
      priorityClassName: {{ .Values.priorityClassName }}
      containers:
      - name: webhook
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
        args:
        - --bind-address=0.0.0.0
        - --port={{ .Values.webhook.port }}
        - --metrics-port={{ .Values.webhook.metricsPort }}
        - --health-port={{ .Values.webhook.healthPort }}
        - --tls-cert-file=/etc/webhook/certs/tls.crt
        - --tls-key-file=/etc/webhook/certs/tls.key
        - --config-file=/etc/webhook/config/config.yaml
        - --tls-min-version={{ .Values.webhook.tlsMinVersion }}
        {{- if .Values.webhook.debug }}
        - --v=4
        {{- end }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: webhook
          containerPort: {{ .Values.webhook.port }}
          protocol: TCP
        - name: metrics
          containerPort: {{ .Values.webhook.metricsPort }}
          protocol: TCP
        - name: health
          containerPort: {{ .Values.webhook.healthPort }}
          protocol: TCP
        startupProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        livenessProbe:
          httpGet:
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook/certs
          readOnly: true
        - name: webhook-config
          mountPath: /etc/webhook/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: webhook-certs
        secret:
          secretName: {{ include "tailscale-injector.fullname" . }}-certs
          defaultMode: 420
      - name: webhook-config
        configMap:
          name: {{ include "tailscale-injector.fullname" . }}-config
          defaultMode: 420
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            {{- include "tailscale-injector.selectorLabels" . | nindent 12 }}